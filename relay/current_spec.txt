
Lacewing Relay Protocol Draft

Table of Contents :-

    1.  Header

       1.1.  Type
       1.2.  Size
       
    2.  Message Types

       2.1.  Client to Server
       2.2.  Server to Client
       
    3.  HTTP

       3.1.  Initialization
       3.2.  Polling
       3.3.  Sending
       3.4.  Message Format

    4.  Appendix
    
       4.1.  Subchannels
       4.2.  Blasting
       
       
1.  Header
    
    All messages sent or received are prefixed with a header containing the type
    of the message, followed by the size (in bytes) of the message.  This is
    only used by the binary protocol; there is no header for HTTP messages
    beyond the type being sent as the first array element.
    
    1.1.  Type
    
        The type is a single byte formed by two 4-bit integers (0 - 15).
        
        The first is the actual message type identifier, and the second is a
        "variant".  The variant is not used by the protocol, and is provided for
        use by the software (eg. to distinguish between different types of
        message).  Note that first means in reading order (ie. if you looked at
        the binary representation of the type byte, the left 4 bits).
        
        Protocol implementations should pass the variant to the receive
        handlers, and take it as an optional parameter to the send functions.
        
    1.2.  Size
    
        The representation of the size varies depending on how big the message
        is :-

          - If the message is under 254 bytes in size, the size is represented
            as a simple 8-bit message size.
          
          - If the message is greater than or equal to 254 bytes in size but
            less than 65535, the size is represented as the byte '254', followed
            by a 16-bit message size.
            
          - If the message is greater than or equal to 65535 bytes in size but
            less than 4294967295, the size is represented as the byte '255',
            followed by a 32-bit message size
            
        Messages greater than 4294967295 bytes in size can not be sent, and
        protocol implementations should generate an error.
    
2.  Message types
    
    2.1.  Client to Server

        0 - Request
                [byte type, ...]

            This is sent when the client wants to request something from the
            server.  The first byte 'type' is the request type, followed by the
            request-specific parameters.
            
            Request types for this protocol revision:
            
                 Request 0 - Connect
                    [string version]
                
                      As soon as the TCP connection is established, the client
                      should send a single byte of 0 to identify themselves
                      as a non-HTTP client.  After this, they may start
                      exchanging messages, of which the Connect request should
                      be the first.
                      
                      The 'version' parameter should be the string "revision 3".
                      If the server receives a Connect request and the 'version'
                      differs from "revision 3", the client will be disconnected
                      immediately.
                
                      The server will respond with response 0 (Connect).
                      
                 Request 1 - SetName
                    [string name]
                 
                      This should be sent by the client before attempting to
                      join any channel.  It may also be sent later if the client
                      wishes to change their name.
                      
                      The 'name' parameter is the desired new name for the
                      client.

                      The server will respond with response 1 (SetName).
                      
                 Request 2 - JoinChannel
                    [byte flags, string name]
                 
                      This may be sent by the client at any time after SetName.
                      
                      The 'name' parameter is the name of the channel the client
                      wishes to join.
                      
                      The 'flags' parameter can contain the following bits:
                      
                          1 - If creating this channel, hide it from the channel
                              list.
                              
                          2 - If creating this channel, close it when this
                              client leaves.
                              
                      The server will respond with response 2 (JoinChannel),
                      which assigns a channel identifier on success.
                       
                 Request 3 - LeaveChannel
                    [short id]
                 
                      Sent by the client to leave a channel.  The 'id' parameter
                      should be a valid channel identifier.
                      
                      The server will respond with response 3 (LeaveChannel).
                          
                 Request 4 - ChannelList
                 
                      Sent by the client to request the list of channels from
                      the server.
                      
                      The server will respond with response 4 (ChannelList).
            
        1 - BinaryServerMessage
                [byte subchannel, binary message]
                
            This is sent to send a message to the server.  It may be sent at any
            time, even before setting a name or joining a channel.

            As this message is a binary message, it will not be sent or received
            by web clients.
            
        2 - BinaryChannelMessage
                [byte subchannel, short channel, binary message]
                
            This is sent to send a message to the channel.  The 'channel'
            parameter must be a valid channel identifier, assigned by the
            JoinChannel response.
      
            As this message is a binary message, it will not be sent or received
            by web clients.
            
        3 - BinaryPeerMessage
                [byte subchannel, short channel, short peer, binary message]
                
            This is sent to send a message to an individual peer.
            
            The 'channel' parameter must be a valid channel identifier, assigned
            by the JoinChannel response.  The 'peer' parameter must be a valid
            peer identifier, assigned by either the JoinChannel response or the
            Peer message.
            
            As this message is a binary message, it will not be sent or received
            by web clients.
            
        4 - ObjectServerMessage
                [byte subchannel, json message]
                
            This is sent to send a message to the server.  Server messages are
            not attached to a channel, so this may be sent at any time, even
            before setting a name.
            
        5 - ObjectChannelMessage
                [byte subchannel, short channel, json message]
                
            This is sent to send an object message to a channel.
            
            The 'channel' parameter must be a valid channel identifier, assigned
            by the JoinChannel response.
            
        6 - ObjectPeerMessage
                [byte subchannel, short channel, short peer, json message]
                
            This is sent to send an object message to an individual peer on a
            channel.
            
            The 'channel' parameter must be a valid channel identifier, assigned
            by the JoinChannel response.  The 'peer' parameter must be a valid
            peer identifier, assigned by either the JoinChannel response or the
            Peer message.
            
        7 - UDPHello
                
            If the client wishes to use UDP, they should start sending this
            every few seconds over UDP from as soon as they receive the Connect
            response, until they receive the UDPWelcome message.
            
            For more information on UDP, see section 4.2.
           
        8 - ChannelMaster
                [short channel, byte action, short peer]
                
            When the client is the channel master of a channel, they may send
            this message to perform channel master-only actions, like kicking
            a peer from the channel.
            
            Actions for this protocol revision:
            
                0 - Kick
                    
                    Kick the peer from the channel.  They will receive a
                    ChannelLeft response from the server.

        9 - Pong
        
            Sent by a client in immediate response to a Ping message.
            
    2.2.  Server to Client

        0 - Response
                [byte type, bool success, ...]

            This is sent as a response to a Request message from the client.
            The first byte 'type' is the response type, followed by a boolean
            indicating success or failure, and then :-
            
                - If success is true, the response specific parameters
                
                - If success is false, the response specific parameters may or
                  may not be present (see each response), and will always be
                  followed by a string deny reason.
            
            Response types for this protocol revision (response 0 is not used):
                      
                 Response 0 - Connect
                        [short peerID, string welcomeMessage]
                 
                      Sent in response to request 0 (Connect).  On failure, the
                      client will be disconnected immediately after being sent
                      this message.  Parameters are omitted on failure.
                                  
                      The 'peerID' parameter is the client's unique ID, for the
                      client to send with UDP messages (and in any other
                      situation the client needs to refer to itself.)

                      After the client has received this, they may begin sending
                      UDPHello messages over UDP, until they receive a
                      UDPWelcome message from the server.

                      Note that the 'peerID' parameter is the same ID peers will
                      receive to identify this client.
                      
                      The 'welcomeMessage' parameter is an optional message,
                      and the contents are up to the server.  Generally this
                      will include the platform and version of the server
                      implementation.
            
                 Response 1 - SetName
                        [byte nameLength, string name]
                 
                      Sent in response to request 1 (SetName).  Parameters are
                      valid even on failure.
                      
                      The 'name' parameter is actual name assigned to the
                      client, as the server may have modified it before
                      accepting.
                      
                      Possible standard deny reasons (the actual format is up to
                      the server implementation) include:
                      
                         - The name was already taken in one of the channels the
                           client is present in
                      
                         - The name was too long, too short, or contained
                           invalid characters
                         
                 Response 2 - JoinChannel
                        [byte flags, byte nameLength, string name,
                               short channel, ...]
                 
                      Sent in response to request 2 (JoinChannel).  The
                      parameters 'nameLength' and 'name' are always valid,
                      but 'flags', 'channel' and the peer list will be omitted
                      on failure.
                      
                      The 'channel' parameter is a unique identifier for the
                      channel, which the client may use to send messages to the
                      channel or individual peers.
                      
                      The 'name' parameter is actual name of the channel, as the
                      server may have modified it before accepting.
                      
                      The only flag in this protocol revision is flag 1, which
                      means the receiving client is the channel master.
                      
                      Possible standard deny reasons (the actual format is up to
                      the server implementation) include:
                      
                         - The name of the client was already taken in the
                           channel they are trying to join
                           
                         - The channel would have been created, but the name
                           was too long, too short or contained invalid
                           characters
                         
                      If the channel join was accepted, the response parameters
                      will end with a list of peers on the channel.
                      
                      Each peer uses this format:
                      
                        [short id, byte flags, byte nameLength, string name]
                        
                      More information on the parameters can be found in the
                      description of the 'Peer' message.
            
                Response 3 - LeaveChannel
                        [short id]
                        
                      Sent in response to request 3 (LeaveChannel).  Parameters
                      are valid even on failure.
                      
                      The 'id' parameter is the unique identifier of the channel
                      that has or has not been left.
                                    
                Response 4 - ChannelList
                      
                      Sent in response to request 4 (ChannelList).  Fails if the
                      server has channel listing disabled, and parameters are
                      omitted on failure.
                      
                      The parameters are a list of channels, each using this
                      format:
                      
                        [short peerCount, byte nameLength, string name]                      

        1 - BinaryServerMessage
                [byte subchannel, binary message]
                
            Message originating from the server, sent to a client.  May be sent
            at any time, even before the client has set a name or joined a
            channel.
            
            As this message is a binary message, it will not be sent to or
            received by web clients.
            
        2 - BinaryChannelMessage
                [byte subchannel, short channel, short peer, binary message]
                
            Relays a BinaryChannelMessage (see the client -> server version)

        3 - BinaryPeerMessage
                [byte subchannel, short channel, short peer, binary message]
                
            Relays a BinaryPeerMessage (see the client -> server version)
            
        4 - BinaryServerChannelMessage
                [byte subchannel, short channel, binary message]
                
            Message originating from the server, related to a particular
            channel.  May or may not be sent to every client on the channel.
            
            The 'channel' parameter must be a valid channel identifier, sent
            to the client previously by the JoinChannel response.
            
        5 - ObjectServerMessage
                [byte subchannel, json message]

            Message originating from the server, sent to a client.  May be sent
            at any time, even before the client has set a name or joined a
            channel.
            
        6 - ObjectChannelMessage
                [byte subchannel, short channel, short peer, json message]
                
            Relays an ObjectChannelMessage (see the client -> server version)
            
        7 - ObjectPeerMessage
                [byte subchannel, short channel, short peer, json message]
                
            Relays an ObjectPeerMessage (see the client -> server version)
            
        8 - ObjectServerChannelMessage
                [byte subchannel, short channel, json message]
                
            Message originating from the server, related to a particular
            channel.  May or may not be sent to every client on the channel.
            
            The 'channel' parameter must be a valid channel identifier, sent
            to the client previously by the JoinChannel response.
            
        9 - Peer
                [short channel, short peer, byte flags, string name] 
        
            This may be sent for a number of reasons:
            
                - The peer just joined the channel
                - The peer changed their name and/or flags
                - The peer left the channel
            
            It is up to the client to determine which of these cases is the
            correct one.  If the peer left the channel, no flags or name will
            be sent (the message length will be 4 bytes only).
            
            The only flag in this protocol revision is flag 1, which means the
            peer in question is the channel master.
            
        10 - UDPWelcome
                
            This is sent over UDP in response to successfully receiving the UDPHello message, to
            confirm that UDP is ready to use.
            
            For more information on UDP, see section 4.2.
            
        11 - Ping
        
            Sent by the server to ensure a client is still alive.  The client
            should respond with a Pong message.
            
3.  HTTP

    All Lacewing servers should accept HTTP clients where possible.  This should
    be a HTTP/1.1 compliant webserver.  The client will communicate with the
    webserver through a series of POST requests, including long-poll requests to
    a 'poll' page.
    
    The HTTP relay protocol should run on the same port as the binary protocol -
    the server can determine which clients are HTTP because they will not send
    the opening 0 byte (which is not valid in HTTP).
    
    3.1.  Initialization
        
        To initiate the HTTP conversation, the client first requests the URL
        'init', passing the version string as the POST item 'version'.  The
        server should respond with a unique textual client identifier.
        
        How this identifier is generated or how it looks is not defined,
        providing it is unique and not blank.
          
        HTTP clients will never (and shouldn't) send the Version message; the
        server should consider the 'init' page a replacement for this, sending
        an empty response if the 'version' POST item is incorrect.
          
        Some servers, where the Lacewing server and webserver are combined, may
        be able to assign the client an identifier when generating the page the
        client is connecting from.  In this case, the client already has an
        identifier, so they do not need to request 'init' and may start with
        'poll' right away.  Note that this will cause the version check to be
        skipped entirely.
          
    3.2.  Polling
    
        The client will now request the page 'poll', with the POST item 'id'
        as the client identifier assigned by the 'init' page.  The server should
        not respond to this request until it has a message to send to the
        client.
          
        When the server does respond to this client, the client will request
        'poll' again immediately.  If the connection performing a 'poll' request
        is severed (without being completed by the server), the server should
        assume that client disconnected and invalidate their client identifier.

    3.3.  Sending
    
        When the client wants to send something to the server, it will request
        the page 'send', with the POST item 'id' as the client identifier
        assigned by the 'init' page, and the POST item 'data' as the message to
        send (format described in 3.4).

    3.4.  Message Format
        
        All messages exchanged between the server and the client are a JSON
        array, where the first element is the message type, and then each
        following array element is one parameter to the Lacewing message.  For
        example, this client to server message:

            [0, 1, "John Smith"]
            
        would be type 0 (Request), with the first parameter 1 (SetName) and the
        second "John Smith".
        
        The server might then respond with:
        
            [0, 1, 1, "John Smith"]

        which is type 0 (Response), with the first parameter 1 (SetName), the
        second 1 (ie. true, the response is a success response), and the third
        "John Smith" again.
        
        If multiple messages are to be transmitted at once, they may be combined
        as an array of arrays, to reduce the number of HTTP requests.
        
        Note that the Binary message type can not be sent by, and should not be
        relayed to, HTTP clients; they may only send or receive Object messages.
        
4.  Appendix

    4.1.  Subchannels
    
        Some messages in Lacewing have a 'subchannel' byte.  This is similar to
        the message variant, and should be exposed in the same way.
        
        The subchannel is different from the variant in that the subchannel
        is intended for use by the application to assign each class of message a
        unique identifier, whereas the variant is intended to distinguish
        between a small number of different data formats.
        
    4.2.  Blasting
    
        Although a TCP connection is always present, the Lacewing protocol
        permits UDP messages to be transmitted where possible.  This has
        traditionally been referred to in implementations of Lacewing and
        predecessors as "blasting".
        
        The format of UDP messages is the same as TCP, except the size is
        omitted from the header, replaced by the client's two byte unique ID
        assigned by the Connect response.  The server must be listening for UDP
        messages on the same port as it is accepting TCP connections.
        
        Also note the Connect (server to client), UDPHello (client to server)
        and UDPWelcome (server to client) messages.  This exchange is necessary
        before UDP messages may be sent and received.
        
        
        
        
        
        
        
        
        
        
        
        